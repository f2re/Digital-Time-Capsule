name: Deploy to Production Server

on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Attest Docker image
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Verify deployment prerequisites
        run: |
          if [[ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]]; then
            echo "Error: SSH_PRIVATE_KEY secret is not set"
            exit 1
          fi
          
          if [[ -z "${{ secrets.DEPLOY_HOST }}" ]]; then
            echo "Error: DEPLOY_HOST secret is not set"
            exit 1
          fi
          
          if [[ -z "${{ secrets.DEPLOY_USER }}" ]]; then
            echo "Error: DEPLOY_USER secret is not set"
            exit 1
          fi

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to production server
        run: |
          # Create a temporary deploy script
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -e
          
          echo "🚀 Starting deployment..."
          cd $HOME/time-capsule-bot
          
          echo "🔄 Pulling latest code..."
          git fetch origin
          git reset --hard origin/main
          
          echo "🐳 Pulling latest Docker images..."
          docker compose pull
          
          echo "🔧 Running database migrations..."
          docker compose run --rm bot python init_db_postgresql.py
          
          echo "🔄 Restarting services..."
          docker compose down
          docker compose up -d
          
          echo "🧹 Cleaning up unused Docker images..."
          docker image prune -f
          
          # Wait a bit and check if services are running
          sleep 10
          if docker compose ps --status running | grep -q "bot"; then
              echo "✅ Bot is running successfully!"
          else
              echo "❌ Bot is not running properly!"
              docker compose logs bot
              exit 1
          fi
          
          echo "✅ Deployment completed successfully!"
          EOL
          
          # Copy the deploy script to the server
          scp -o StrictHostKeyChecking=no deploy.sh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/
          
          # Execute the deploy script on the server
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "chmod +x /tmp/deploy.sh && /tmp/deploy.sh && rm /tmp/deploy.sh"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "🎉 Deployment to production completed successfully!"
            echo "Tag: ${{ github.ref_name }}"
            echo "Commit: ${{ github.sha }}"
          else
            echo "❌ Deployment to production failed!"
            echo "Check the logs above for details."
          fi